const { ethers } = require("hardhat");

async function main() {
    console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤ MonadPay ÊîØ‰ªòÁ≥ªÁªü...\n");
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
    const signers = await ethers.getSigners();
    const deployer = signers[0];
    console.log("üì± ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
    console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.formatEther(await ethers.provider.getBalance(deployer.address)), "ETH");

    // ‰∏∫ÊºîÁ§∫ÂàõÂª∫ËôöÊãüÁî®Êà∑Âú∞ÂùÄ
    const user1 = deployer; // ‰ΩøÁî®ÈÉ®ÁΩ≤ËÄÖ‰Ωú‰∏∫Áî®Êà∑1
    const user2Address = "0x0000000000000000000000000000000000000123"; // ËôöÊãüÁî®Êà∑2Âú∞ÂùÄ

    // ËÆæÁΩÆÊâãÁª≠Ë¥πÊé•Êî∂Âú∞ÂùÄ
    const feeRecipient = deployer.address;

    console.log("\nüì¶ ÈÉ®ÁΩ≤ÂêàÁ∫¶...");
    
    // 1. ÈÉ®ÁΩ≤‰∏ªÊîØ‰ªòÁ≥ªÁªüÂêàÁ∫¶
    const MonadPaymentSystem = await ethers.getContractFactory("MonadPaymentSystem");
    const paymentSystem = await MonadPaymentSystem.deploy(feeRecipient);
    await paymentSystem.waitForDeployment();
    console.log("‚úÖ MonadPaymentSystem Â∑≤ÈÉ®ÁΩ≤:", await paymentSystem.getAddress());
    
    // 2. ÈÉ®ÁΩ≤URLËß£ÊûêÂô®ÂêàÁ∫¶
    const MonadPayURLParser = await ethers.getContractFactory("MonadPayURLParser");
    const urlParser = await MonadPayURLParser.deploy(await paymentSystem.getAddress());
    await urlParser.waitForDeployment();
    console.log("‚úÖ MonadPayURLParser Â∑≤ÈÉ®ÁΩ≤:", await urlParser.getAddress());

    // 3. Ê≥®ÂÜåÂ∏∏Áî®‰ª£Â∏ÅÁ¨¶Âè∑
    console.log("\nüîß ÈÖçÁΩÆ‰ª£Â∏ÅÁ¨¶Âè∑...");
    // ‰ΩøÁî®ÁÆÄÂçïÁöÑÊµãËØïÂú∞ÂùÄÔºåÈÅøÂÖçÊ†°È™åÂíåÈóÆÈ¢ò
    await paymentSystem.registerTokenSymbol("USDC", "0x0000000000000000000000000000000000000001"); // ÊµãËØïÂú∞ÂùÄ1
    await paymentSystem.registerTokenSymbol("USDT", "0x0000000000000000000000000000000000000002"); // ÊµãËØïÂú∞ÂùÄ2
    console.log("‚úÖ Â∑≤Ê≥®ÂÜå USDC Âíå USDT ‰ª£Â∏ÅÁ¨¶Âè∑");

    console.log("\nüìä ÂêàÁ∫¶‰ø°ÊÅØ:");
    console.log("   - ÊâãÁª≠Ë¥πÊé•Êî∂Âú∞ÂùÄ:", feeRecipient);
    console.log("   - Âπ≥Âè∞ÊâãÁª≠Ë¥πÁéá:", await paymentSystem.platformFee(), "/ 10000 (1%)");
    console.log("   - ÂêàÁ∫¶ÊöÇÂÅúÁä∂ÊÄÅ:", await paymentSystem.paused());

    console.log("\nüéÆ ÂºÄÂßãÊºîÁ§∫ MonadPay ÂäüËÉΩ...\n");

    // ÊºîÁ§∫1: ÂçïÁ¨îÊîØ‰ªò
    console.log("üí∏ ÊºîÁ§∫1: ÂçïÁ¨îÂéüÁîü‰ª£Â∏ÅÊîØ‰ªò");
    try {
        const tx1 = await paymentSystem.connect(user1).singlePayment(
            user2Address,
            ethers.ZeroAddress, // ÂéüÁîü‰ª£Â∏Å
            ethers.parseEther("0.1"),
            "ÂíñÂï°‰ªòÊ¨æ",
            { value: ethers.parseEther("0.1") }
        );
        await tx1.wait();
        console.log("‚úÖ ÊîØ‰ªòÊàêÂäü! ‰∫§ÊòìÂìàÂ∏å:", tx1.hash);
    } catch (error) {
        console.log("‚ùå ÊîØ‰ªòÂ§±Ë¥•:", error.message);
    }

    // ÊºîÁ§∫2: ÈÄöËøá‰ª£Â∏ÅÁ¨¶Âè∑ÊîØ‰ªò
    console.log("\nü™ô ÊºîÁ§∫2: ÈÄöËøá‰ª£Â∏ÅÁ¨¶Âè∑ÊîØ‰ªò");
    try {
        const tx2 = await paymentSystem.connect(user1).payByTokenSymbol(
            user2Address,
            ethers.parseEther("0.05"),
            "MONAD",
            "ÊúçÂä°Ë¥π",
            { value: ethers.parseEther("0.05") }
        );
        await tx2.wait();
        console.log("‚úÖ ‰ª£Â∏ÅÁ¨¶Âè∑ÊîØ‰ªòÊàêÂäü! ‰∫§ÊòìÂìàÂ∏å:", tx2.hash);
    } catch (error) {
        console.log("‚ùå ‰ª£Â∏ÅÁ¨¶Âè∑ÊîØ‰ªòÂ§±Ë¥•:", error.message);
    }

    // ÊºîÁ§∫3: ÊâπÈáèÊîØ‰ªò
    console.log("\nüì¶ ÊºîÁ§∫3: ÊâπÈáèÊîØ‰ªò");
    try {
        const batchPayments = [
            {
                recipient: user2Address,
                token: ethers.ZeroAddress,
                amount: ethers.parseEther("0.02"),
                label: "Â∑•ËµÑÊîØ‰ªò1"
            },
            {
                recipient: deployer.address,
                token: ethers.ZeroAddress,
                amount: ethers.parseEther("0.01"),
                label: "Â∑•ËµÑÊîØ‰ªò2"
            }
        ];

        const totalAmount = ethers.parseEther("0.03");
        const tx3 = await paymentSystem.connect(user1).batchPayment(
            batchPayments,
            { value: totalAmount }
        );
        await tx3.wait();
        console.log("‚úÖ ÊâπÈáèÊîØ‰ªòÊàêÂäü! ‰∫§ÊòìÂìàÂ∏å:", tx3.hash);
    } catch (error) {
        console.log("‚ùå ÊâπÈáèÊîØ‰ªòÂ§±Ë¥•:", error.message);
    }

    // ÊºîÁ§∫4: ÂàõÂª∫ËÆ¢ÈòÖ
    console.log("\nüìÖ ÊºîÁ§∫4: ÂàõÂª∫ËÆ¢ÈòÖ");
    try {
        const tx4 = await paymentSystem.connect(user1).createSubscription(
            user2Address,
            ethers.ZeroAddress,
            ethers.parseEther("0.01"), // ÊØèÊúü0.01 ETH
            7 * 24 * 3600, // 7Â§©Èó¥Èöî
            30 * 24 * 3600, // 30Â§©ÊÄªÊúüÈôê
            "ÊúàÂ∫¶ËÆ¢ÈòÖÊúçÂä°"
        );
        const receipt = await tx4.wait();
        
        // Ëé∑ÂèñËÆ¢ÈòÖID
        const subscriptionEvent = receipt.events?.find(e => e.event === 'SubscriptionCreated');
        const subscriptionId = subscriptionEvent?.args?.subscriptionId;
        
        console.log("‚úÖ ËÆ¢ÈòÖÂàõÂª∫ÊàêÂäü! ËÆ¢ÈòÖID:", subscriptionId?.toString());
    } catch (error) {
        console.log("‚ùå ËÆ¢ÈòÖÂàõÂª∫Â§±Ë¥•:", error.message);
    }

    // ÊºîÁ§∫5: ÂàõÂª∫Ëß£ÈîÅÈáëÂ∫ì
    console.log("\nüîê ÊºîÁ§∫5: ÂàõÂª∫Ëß£ÈîÅÈáëÂ∫ì");
    try {
        const unlockTime = Math.floor(Date.now() / 1000) + 3600; // 1Â∞èÊó∂ÂêéËß£ÈîÅ
        const tx5 = await paymentSystem.connect(user1).createVault(
            user2Address,
            ethers.ZeroAddress,
            ethers.parseEther("0.08"),
            unlockTime,
            "ÂëòÂ∑•Â•ñÂä±Ëß£ÈîÅ",
            { value: ethers.parseEther("0.08") }
        );
        const receipt = await tx5.wait();
        
        const vaultEvent = receipt.events?.find(e => e.event === 'VaultCreated');
        const vaultId = vaultEvent?.args?.vaultId;
        
        console.log("‚úÖ Ëß£ÈîÅÈáëÂ∫ìÂàõÂª∫ÊàêÂäü! ÈáëÂ∫ìID:", vaultId?.toString());
        console.log("   Ëß£ÈîÅÊó∂Èó¥:", new Date(unlockTime * 1000).toLocaleString());
    } catch (error) {
        console.log("‚ùå ÈáëÂ∫ìÂàõÂª∫Â§±Ë¥•:", error.message);
    }

    // ÊºîÁ§∫6: URLÊîØ‰ªòÁ§∫‰æã
    console.log("\nüîó ÊºîÁ§∫6: MonadPay URL ÁîüÊàê");
    try {
        const sampleURL = await urlParser.buildMonadPayURL(
            user2Address,
            ethers.parseEther("10.5"),
            "USDC",
            "ÂíñÂï°"
        );
        console.log("‚úÖ ÁîüÊàêÁöÑ MonadPay URL:");
        console.log("   ", sampleURL);
    } catch (error) {
        console.log("‚ùå URLÁîüÊàêÂ§±Ë¥•:", error.message);
    }

    // Êü•ËØ¢Áî®Êà∑Êï∞ÊçÆ
    console.log("\nüìà Êü•ËØ¢Áî®Êà∑Êï∞ÊçÆ:");
    const userSubscriptions = await paymentSystem.getUserSubscriptions(user1.address);
    const userVaults = await paymentSystem.getUserVaults(user1.address);
    
    console.log("   Áî®Êà∑1ËÆ¢ÈòÖÊï∞Èáè:", userSubscriptions.length);
    console.log("   Áî®Êà∑1ÈáëÂ∫ìÊï∞Èáè:", userVaults.length);

    console.log("\nüéâ MonadPay ÊºîÁ§∫ÂÆåÊàê!");
    console.log("\nüìã ÈÉ®ÁΩ≤ÊëòË¶Å:");
    console.log("   - MonadPaymentSystem:", await paymentSystem.getAddress());
    console.log("   - MonadPayURLParser:", await urlParser.getAddress());
    console.log("   - ÁΩëÁªú:", (await ethers.provider.getNetwork()).name);
    console.log("   - ÈìæID:", (await ethers.provider.getNetwork()).chainId);

    console.log("\nüîó MonadPay URL Á§∫‰æã:");
    console.log("   https://pay.monad.link/send?to=" + user2Address + "&amount=10.5&token=USDC&label=ÂíñÂï°");
    console.log("   https://pay.monad.link/send?to=" + user2Address + "&amount=1.0&token=MONAD&label=Â∞èË¥π");

    console.log("\n‚ú® ÊÇ®ÂèØ‰ª•Áé∞Âú®‰ΩøÁî®Ëøô‰∫õÂêàÁ∫¶Âú∞ÂùÄÊù•ÈõÜÊàê MonadPay ÂäüËÉΩ!");
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
        process.exit(1);
    }); 